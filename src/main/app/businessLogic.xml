<?xml version="1.0" encoding="UTF-8"?>

<mule 
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:dynamicscrm="http://www.mulesoft.org/schema/mule/dynamicscrm"
	xmlns:core="http://www.mulesoft.org/schema/mule/core" 
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" 
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" 
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/dynamicscrm http://www.mulesoft.org/schema/mule/dynamicscrm/current/mule-dynamicscrm.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">

	<batch:job name="syncContactBatch">
		<batch:threading-profile poolExhaustedAction="WAIT" />
		<batch:input>
			<dynamicscrm:retrieve-multiple-by-query	config-ref="MS_Dynamics_CRM"
				query="&lt;fetch mapping=&quot;logical&quot;&gt;
&lt;entity name=&quot;contact&quot;&gt;
&lt;attribute name=&quot;contactid&quot; /&gt;
&lt;attribute name=&quot;emailaddress1&quot; /&gt;
&lt;attribute name=&quot;firstname&quot; /&gt;
&lt;attribute name=&quot;fullname&quot; /&gt;
&lt;attribute name=&quot;lastname&quot; /&gt;
&lt;attribute name=&quot;parentcustomerid&quot; /&gt;
&lt;attribute name=&quot;telephone1&quot; /&gt;
&lt;link-entity name=&quot;account&quot; from=&quot;accountid&quot; to=&quot;parentcustomerid&quot; alias=&quot;acc&quot; link-type=&quot;inner&quot;&gt;
       &lt;attribute name=&quot;name&quot;/&gt;
&lt;/link-entity&gt;
&lt;/entity&gt;
&lt;/fetch&gt;"
				doc:name="Query MS Dynamics CRM for Contacts" />
		</batch:input>
		<batch:process-records>
 			<batch:step name="getContactInSalesforceStep">
				<enricher source="#[payload == null ? null : payload.Id]" target="#[payload.Id]"
					doc:name="set payload Id with SFDC contact Id if exists">
                    <sfdc:query-single config-ref="Salesforce" query="SELECT Id,Name FROM Contact WHERE Name = '#[payload.fullname]'" doc:name="query Salesforce for matching Contact"/>

				</enricher>
			</batch:step>
			<batch:step name="findOrCreateAccountInSalesforceStep" accept-expression="#[(payload.get('acc.name').value != null) &amp;&amp; ('syncAccount' == '${account.sync.policy}')]">
                <enricher source="#[payload]" target="#[recordVars.sfAccount]" doc:name="store in recordVars['sfAccount']">
                    <sfdc:query-single config-ref="Salesforce" query="SELECT Id, Name FROM Account WHERE Name = '#[payload.get('acc.name').value]'" doc:name="query Salesforce for matching Account"/>
                </enricher>
                <logger message="payload= #[payload], sfAccount=#[recordVars.sfAccount]" level="INFO" doc:name="log sfAccount"/>
                <choice doc:name="No Matching Account found in Salesforce">
                    <when expression="#[recordVars['sfAccount'] == null]">
                        <enricher source="#[payload.getId()]" target="#[payload.accountId]" doc:name="enrich payload with new accountId">
                            <sfdc:create-single config-ref="Salesforce" type="Account" doc:name="create Account in Salesforce">
                                <sfdc:object>
                                    <sfdc:object key="Name">#[payload.get('acc.name').value]</sfdc:object>
                                </sfdc:object>
                            </sfdc:create-single>
                        </enricher>
                    </when>
                    <otherwise>
                        <enricher target="#[payload.accountId]" doc:name="enrich payload with existing accountId">
                            <set-payload value="#[recordVars.sfAccount.Id]" doc:name="load existing account ID"/>
                        </enricher>

                    </otherwise>
                </choice>



			</batch:step>
			<batch:step name="upsertContactInSalesforceStep">


				<batch:commit size="100" doc:name="Batch Commit">
					<dw:transform-message doc:name="CRM Map to SFDC Map">
						<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
	(Id: 		$.Id) when $.Id != null,
	(AccountId: $.accountId) when $.accountId?,
	FirstName: 	$.firstname,
	LastName: 	$.lastname,
	Email: 		$.emailaddress1,
	Phone: 		$.telephone1
}]]></dw:set-payload>
					</dw:transform-message>
					<sfdc:upsert config-ref="Salesforce"
						externalIdFieldName="Id" type="Contact" doc:name="upsert Contact in Salesforce">
						<sfdc:objects ref="#[payload]" />
					</sfdc:upsert>
					<logger message="upsert result: #[payload]" level="INFO" doc:name="log result" />
				</batch:commit>
			</batch:step>
		</batch:process-records>
		<batch:on-complete>
			<scatter-gather doc:name="All">
				<processor-chain>
					<json:object-to-json-transformer
						doc:name="transform BatchJobInstance to JSON" />
					<logger message="Migration process has finished: #[payload]"
						level="INFO" doc:name="log 'Migration process has finished'" />
				</processor-chain>
				<processor-chain>
					<parse-template location="email/body.html"
						doc:name="Parse Template" />
					<smtp:outbound-endpoint host="${smtp.host}"
						port="${smtp.port}" user="${smtp.user}" password="${smtp.password}"
						connector-ref="gmailConnector" to="${mail.to}" from="${mail.from}"
						subject="${mail.subject}" responseTimeout="10000" doc:name="send mail" />
				</processor-chain>
			</scatter-gather>
		</batch:on-complete>
	</batch:job>
	<flow name="mainFlow"
		doc:description="This flow is the entry point to the Kick business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Template exposes to trigger it.

">
		<batch:execute name="syncContactBatch" doc:name="syncContactBatch" />

		<exception-strategy ref="defaultChoiceExceptionStrategy"
			doc:name="Reference Exception Strategy" />
	</flow>
</mule>
